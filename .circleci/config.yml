version: 2.1

orbs:
  go: circleci/go@1.8.0
  node: circleci/node@5.2.0
  slack: circleci/slack@4.10.1

commands:
  notify-failures-on-main:
    description: "Notify Slack"
    parameters:
      channel:
        type: string
        default: C03N11M0BBN
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1
          branch_pattern: main
  install-just:
    description: "Install just"
    steps:
      - run:
          name: "Install just"
          command: |
            wget -qO - 'https://proget.makedeb.org/debian-feeds/prebuilt-mpr.pub' | gpg --dearmor | sudo tee /usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg 1> /dev/null
            echo "deb [arch=all,$(dpkg --print-architecture) signed-by=/usr/share/keyrings/prebuilt-mpr-archive-keyring.gpg] https://proget.makedeb.org prebuilt-mpr $(lsb_release -cs)" | sudo tee /etc/apt/sources.list.d/prebuilt-mpr.list
            sudo apt update
            sudo apt install just

jobs:
  golang-lint:
    executor:
      name: go/default  # is based on cimg/go
      tag: '1.21'
    steps:
      - checkout
      - install-just
      - run: just lint-all
  golang-modules-tidy:
    executor:
      name: go/default  # is based on cimg/go
      tag: '1.21'
    steps:
      - checkout
      - install-just
      - run: just tidy-all
      - run:
          name: check git tree is clean
          command: git diff --exit-code
  golang-test:
    shell: /bin/bash -eo pipefail
    executor:
      name: go/default  # is based on cimg/go
      tag: '1.21'
    steps:
      - checkout
      - install-just
      - run:
          name: Install gotestsum
          command: go install gotest.tools/gotestsum@latest
      - run:
          # need foundry to execute 'cast call' within add-chain script
          name: Install foundry
          command: |
            echo "SHELL=$SHELL"
            # Set up directory structure
            mkdir -p $HOME/.foundry/bin
            echo 'export PATH="$HOME/.foundry/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV

            # Download foundryup and make it executable
            curl -sSL "https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/foundryup" -o $HOME/.foundry/bin/foundryup
            chmod +x $HOME/.foundry/bin/foundryup

            $HOME/.foundry/bin/foundryup
            forge --version
      - run:
          name: run superchain module tests
          command: just test-superchain
      - run:
          name: run validation module tests
          command: just test-validation
      - run:
          name: run add-chain module tests
          command: just test-add-chain
      - notify-failures-on-main
  publish-bot:
    environment:
      NODE_AUTH_TOKEN: $NPM_TOKEN  # Use NPM_TOKEN as the auth token
    docker:
      - image: cimg/node:18  # Use Node.js 18
    steps:
      - checkout
      - run:
          name: Set deployment token
          command: npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run:
          name: Build and publish package on NPM ðŸ“¦
          command: pnpm release
  check-codegen:
    executor:
      name: go/default  # is based on cimg/go
      tag: '1.21'
    steps:
      - checkout
      - install-just
      - run:
          name: Run codegen
          command: just codegen
      - run:
          name: check git tree is clean
          command: git diff --exit-code

workflows:
  hourly:
    jobs:
      - golang-test:
          context:
            - slack
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - main
  pr-checks:
    jobs:
      - golang-lint
      - golang-modules-tidy
      - golang-test
      - check-codegen


