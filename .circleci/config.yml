version: 2.1

orbs:
  go: circleci/go@1.8.0
  slack: circleci/slack@4.10.1

commands:
  notify-failures-on-main:
    description: "Notify Slack"
    parameters:
      channel:
        type: string
        default: C03N11M0BBN
    steps:
      - slack/notify:
          channel: << parameters.channel >>
          event: fail
          template: basic_fail_1
          branch_pattern: main
jobs:
  golang-lint:
    executor:
      name: go/default  # is based on cimg/go
      tag: '1.21'
    steps:
      - checkout
      - run:  golangci-lint run superchain/... validation/... add-chain/...
  golang-modules-tidy:
    executor:
      name: go/default  # is based on cimg/go
      tag: '1.21'
    steps:
      - checkout
      - run:
          name: tidy superchain module
          command: go mod tidy
          working_directory: superchain
      - run:
          name: tidy validation module
          command: go mod tidy
          working_directory: validation
      - run:
          name: tidy add-chain module
          command: go mod tidy
          working_directory: add-chain
      - run:
          name: check git tree is clean
          command: git diff --exit-code
  golang-test:
    shell: /bin/bash -eo pipefail
    executor:
      name: go/default  # is based on cimg/go
      tag: '1.21'
    steps:
      - checkout
      - run:
          # need foundry to execute 'cast call' within add-chain script
          name: Install foundry
          command: |
            echo "SHELL=$SHELL"
            # Set up directory structure
            mkdir -p $HOME/.foundry/bin
            echo 'export PATH="$HOME/.foundry/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV

            # Download foundryup and make it executable
            curl -sSL "https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/foundryup" -o $HOME/.foundry/bin/foundryup
            chmod +x $HOME/.foundry/bin/foundryup

            $HOME/.foundry/bin/foundryup
            forge --version
      - run:
          name: run superchain module tests
          command: go test ./... -v
          working_directory: superchain
      - run:
          name: run validation module tests
          command: go test ./... -v
          working_directory: validation
      - run:
          name: run add-chain module tests
          command: go test ./... -v
          working_directory: add-chain
      - notify-failures-on-main
  publish-bot:
    environment:
      NODE_AUTH_TOKEN: $NPM_TOKEN  # Use NPM_TOKEN as the auth token
    docker:
      - image: cimg/node:18  # Use Node.js 18
    steps:
      - checkout
      - run:
          name: Set deployment token
          command: npm config set '//registry.npmjs.org/:_authToken' "${NPM_TOKEN}"
      - env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - run:
          name: Build and publish package on NPM ðŸ“¦
          command: pnpm release
  check-codegen:
    docker:
      - image: cimg/node:18.18.2
    steps:
      - checkout
      - run:
          name: Run codegen
          command: pnpm codegen
      - run:
          name: Check for changes
          command: git diff --exit-code
  check-forge-fmt:
    docker:
      - image: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder:v0.40.0
    steps:
      - checkout
      - run:
          name: check compliance with forge fmt
          command: |
            forge fmt --check
  check-security-configs:
    circleci_ip_ranges: true
    docker:
      - image: us-docker.pkg.dev/oplabs-tools-artifacts/images/ci-builder:v0.40.0
    steps:
      - checkout
      - run:
          name: check security configs
          command: sh ./scripts/check-security-configs.sh
      - notify-failures-on-main

workflows:
  hourly:
    jobs:
      - golang-test:
          context:
            - slack
      - check-security-configs:
          context:
            - slack
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - main
  pr-checks:
    jobs:
      - golang-lint
      - golang-modules-tidy
      - golang-test
      - check-codegen
      - check-forge-fmt
      - check-security-configs


