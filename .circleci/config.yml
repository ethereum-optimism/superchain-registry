version: 2.1

orbs:
  codecov: codecov/codecov@5.0.3
  utils: ethereum-optimism/circleci-utils@1.0.8

executors:
  default:
    machine:
      image: ubuntu-2204:2024.08.1
    resource_class: medium

parameters:
  default_docker_image:
    type: string
    default: cimg/base:2024.01
  sepolia_rpc_url:
    type: string
    default: https://ci-sepolia-l1.optimism.io
  mainnet_rpc_url:
    type: string
    default: https://ci-mainnet-l1.optimism.io
  github_repo:
    type: string
    default: ethereum-optimism/superchain-registry

jobs:
  go-lint-test:
    circleci_ip_ranges: true
    parameters:
      package:
        type: string
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Tidy mod
          command: |
            go mod tidy
            git diff --exit-code
          working_directory: << parameters.package >>
      - run:
          name: Lint
          command: golangci-lint run ./...
          working_directory: << parameters.package >>
      - run:
          name: Run tests
          command: gotestsum --format testname --junitfile test-results.xml --packages=./... -- --coverprofile coverage.out
          working_directory: << parameters.package >>
          environment:
            SEPOLIA_RPC_URL: << pipeline.parameters.sepolia_rpc_url >>
            MAINNET_RPC_URL: << pipeline.parameters.mainnet_rpc_url >>
      - store_test_results:
          path: << parameters.package >>/test-results.xml
      - codecov/upload:
          disable_search: true
          files: ./<<parameters.package>>/coverage.out

  run-tool:
    circleci_ip_ranges: true
    parameters:
      tool:
        type: string
      args:
        type: string
        default: ""
      check_diff:
        type: boolean
        default: false
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Run tool
          command: go run ./cmd/<< parameters.tool >>/main.go << parameters.args >>
          working_directory: ops
      - when:
          condition: << parameters.check_diff >>
          steps:
            - run:
                name: Check diff
                command: git diff --exit-code

  check-staging-empty:
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Check staging is empty
          command: |
            # Count number of files in .staging (including hidden files)
            file_count=$(ls -la .staging | wc -l)
            # Subtract 3 from count to account for "." and ".." and ".gitkeep"
            actual_count=$((file_count - 3))

            # Check if .gitkeep exists
            if [ ! -f ".staging/.gitkeep" ]; then
                echo "Error: .gitkeep file is missing"
                exit 1
            fi

            # Nothing else should be in the directory
            if [ $actual_count -ne 1 ]; then
              echo "Staging directory is not empty"
              exit 1
            fi

  run-staging-report:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: Check if PR
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" ]; then
              echo "Not a PR, skipping"
              circleci-agent step halt
            fi
      - run:
          name: Run staging report
          environment:
            SEPOLIA_RPC_URL: << pipeline.parameters.sepolia_rpc_url >>
            MAINNET_RPC_URL: << pipeline.parameters.mainnet_rpc_url >>
            GITHUB_REPO: << pipeline.parameters.github_repo >>
          command: |
            cd ops
            go run ./cmd/print_staging_report/main.go

  check-codegen:
    circleci_ip_ranges: true
    docker:
      - image: <<pipeline.parameters.default_docker_image>>
    steps:
      - utils/checkout-with-mise
      - run:
          name: check-codegen-for-changed-chains
          command: |
            set -e

            # Get list of changed files (including deleted ones)
            CHANGED_FILES=$(git diff --name-only origin/main... | grep "^superchain/configs/.*\.toml$" || true)

            if [ -z "$CHANGED_FILES" ]; then
              echo "No .toml files changed in superchain/configs, skipping codegen check"
              exit 0
            fi

            # Extract superchain names from the file paths
            SUPERCHAINS=""

            for file in $CHANGED_FILES; do
              # Extract the superchain name (directory between configs/ and the filename)
              SUPERCHAIN_NAME=$(echo "$file" | sed -n 's|^superchain/configs/\([^/]*\)/.*$|\1|p')

              # If this is a superchain.toml file, skip it
              if [[ "$file" == *"superchain.toml" ]]; then
                continue
              fi

              # Check if this superchain is already in our list
              if [[ ! $SUPERCHAINS =~ (^|,)$SUPERCHAIN_NAME(,|$) ]] && [ -n "$SUPERCHAIN_NAME" ]; then
                if [ -z "$SUPERCHAINS" ]; then
                  SUPERCHAINS="$SUPERCHAIN_NAME"
                else
                  SUPERCHAINS="$SUPERCHAINS,$SUPERCHAIN_NAME"
                fi
                echo "Found superchain $SUPERCHAIN_NAME affected by changes in $file"
              fi
            done

            echo "Found the following superchains with changes: $SUPERCHAINS"

            cd ops
            if [ -n "$SUPERCHAINS" ]; then
              echo "Running codegen for the following superchains: $SUPERCHAINS\n"
              go run ./cmd/codegen \
                --l1-rpc-urls="<< pipeline.parameters.sepolia_rpc_url >>,<< pipeline.parameters.mainnet_rpc_url >>" \
                --superchains="$SUPERCHAINS"
            fi

            if [ -n "$(git status --porcelain)" ]; then
              echo "\n‚ùå Changes detected after running codegen. Run the following command locally and commit the changes:\n"
              echo "go run ./cmd/codegen \\"
              echo "  --l1-rpc-urls=\"<urls>\" \\"
              echo "  --superchains=\"$SUPERCHAINS\""
              exit 1
            else
              echo "\n‚úÖ All codegen files are up to date"
            fi

  notify-when-chain-is-added-to-registry:
    executor: default
    parameters:
      branch:
        type: string
        default: test-branch
      slack_webhook_url:
        type: env_var_name
        default: SLACK_WEBHOOK_URL
      github_token:
        type: env_var_name
        default: GITHUB_TOKEN
    steps:
      - checkout
      - run:
          name: Check if running on main branch
          command: |
            if [ "$CIRCLE_BRANCH" != "<< parameters.branch >>" ]; then
              echo "Not running on << parameters.branch >> branch (current: $CIRCLE_BRANCH), skipping notification"
              circleci-agent step halt
            fi
      - run:
          name: Notify when chains are changed in registry
          command: |
            set -e

            # Get added, deleted, and modified files
            ADDED_FILES=$(git diff --name-only --diff-filter=A HEAD~1 HEAD | grep -E "^superchain/configs/(mainnet|sepolia)/.*\.toml$" | grep -v "superchain.toml" || true)
            DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD~1 HEAD | grep -E "^superchain/configs/(mainnet|sepolia)/.*\.toml$" | grep -v "superchain.toml" || true)
            MODIFIED_FILES=$(git diff --name-only --diff-filter=M HEAD~1 HEAD | grep -E "^superchain/configs/(mainnet|sepolia)/.*\.toml$" | grep -v "superchain.toml" || true)

            # Check if any changes detected
            if [ -z "$ADDED_FILES" ] && [ -z "$DELETED_FILES" ] && [ -z "$MODIFIED_FILES" ]; then
              echo "No chain changes detected in this merge to << parameters.branch >>"
              exit 0
            fi

            echo "üîÑ Chain changes detected in the registry:"
            echo "=========================================="

            # Prepare messages for both Slack and GitHub
            SLACK_MESSAGE="üîÑ *Chain changes in Superchain Registry!*\n\n"
            GITHUB_MESSAGE="## üîÑ Chain Changes in Superchain Registry\n\n"
            TOTAL_CHANGES=0

            # Process added chains
            if [ -n "$ADDED_FILES" ]; then
              echo ""
              echo "‚ûï ADDED CHAINS:"
              SLACK_MESSAGE="${SLACK_MESSAGE}*‚ûï Added Chains:*\n"
              GITHUB_MESSAGE="${GITHUB_MESSAGE}### ‚ûï Added Chains\n\n"

              for file in $ADDED_FILES; do
                CHAIN_NAME=$(basename "$file" .toml)
                NETWORK=$(echo "$file" | sed -n 's|^superchain/configs/\([^/]*\)/.*$|\1|p')

                echo "  ‚úÖ Chain '$CHAIN_NAME' added to $NETWORK network"
                SLACK_MESSAGE="${SLACK_MESSAGE}  ‚úÖ \`${CHAIN_NAME}\` added to *${NETWORK}* network\n"
                GITHUB_MESSAGE="${GITHUB_MESSAGE}- ‚úÖ \`${CHAIN_NAME}\` added to **${NETWORK}** network\n"
                TOTAL_CHANGES=$((TOTAL_CHANGES + 1))
              done
              SLACK_MESSAGE="${SLACK_MESSAGE}\n"
              GITHUB_MESSAGE="${GITHUB_MESSAGE}\n"
            fi

            # Process deleted chains
            if [ -n "$DELETED_FILES" ]; then
              echo ""
              echo "‚ûñ REMOVED CHAINS:"
              SLACK_MESSAGE="${SLACK_MESSAGE}*‚ûñ Removed Chains:*\n"
              GITHUB_MESSAGE="${GITHUB_MESSAGE}### ‚ûñ Removed Chains\n\n"

              for file in $DELETED_FILES; do
                CHAIN_NAME=$(basename "$file" .toml)
                NETWORK=$(echo "$file" | sed -n 's|^superchain/configs/\([^/]*\)/.*$|\1|p')

                echo "  ‚ùå Chain '$CHAIN_NAME' removed from $NETWORK network"
                SLACK_MESSAGE="${SLACK_MESSAGE}  ‚ùå \`${CHAIN_NAME}\` removed from *${NETWORK}* network\n"
                GITHUB_MESSAGE="${GITHUB_MESSAGE}- ‚ùå \`${CHAIN_NAME}\` removed from **${NETWORK}** network\n"
                TOTAL_CHANGES=$((TOTAL_CHANGES + 1))
              done
              SLACK_MESSAGE="${SLACK_MESSAGE}\n"
              GITHUB_MESSAGE="${GITHUB_MESSAGE}\n"
            fi

            # Process modified chains
            if [ -n "$MODIFIED_FILES" ]; then
              echo ""
              echo "üîß MODIFIED CHAINS:"
              SLACK_MESSAGE="${SLACK_MESSAGE}*üîß Modified Chains:*\n"
              GITHUB_MESSAGE="${GITHUB_MESSAGE}### üîß Modified Chains\n\n"

              for file in $MODIFIED_FILES; do
                CHAIN_NAME=$(basename "$file" .toml)
                NETWORK=$(echo "$file" | sed -n 's|^superchain/configs/\([^/]*\)/.*$|\1|p')

                echo "  üîß Chain '$CHAIN_NAME' modified in $NETWORK network"
                SLACK_MESSAGE="${SLACK_MESSAGE}  üîß \`${CHAIN_NAME}\` modified in *${NETWORK}* network\n"
                GITHUB_MESSAGE="${GITHUB_MESSAGE}- üîß \`${CHAIN_NAME}\` modified in **${NETWORK}** network\n"
                TOTAL_CHANGES=$((TOTAL_CHANGES + 1))
              done
              SLACK_MESSAGE="${SLACK_MESSAGE}\n"
              GITHUB_MESSAGE="${GITHUB_MESSAGE}\n"
            fi

            echo "=========================================="
            echo "Total chain changes: $TOTAL_CHANGES"

            # Finalize messages
            SLACK_MESSAGE="${SLACK_MESSAGE}üìä *Total changes:* ${TOTAL_CHANGES}"
            SLACK_MESSAGE="${SLACK_MESSAGE}\nüîó *Commit:* <${CIRCLE_BUILD_URL}|View in CircleCI>"

            GITHUB_MESSAGE="${GITHUB_MESSAGE}---\n"
            GITHUB_MESSAGE="${GITHUB_MESSAGE}üìä **Total changes:** ${TOTAL_CHANGES}\n"
            GITHUB_MESSAGE="${GITHUB_MESSAGE}üîó **CircleCI Build:** [View Build](${CIRCLE_BUILD_URL})\n"
            GITHUB_MESSAGE="${GITHUB_MESSAGE}üîó **Commit:** [\`${CIRCLE_SHA1:0:7}\`](https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1})"

            # Export for notifications
            echo "export SLACK_PARAM_MESSAGE='${SLACK_MESSAGE}'" >> $BASH_ENV
            echo "export GITHUB_PARAM_MESSAGE='${GITHUB_MESSAGE}'" >> $BASH_ENV
            echo "export CHAIN_CHANGES_DETECTED=true" >> $BASH_ENV
            echo "export TOTAL_CHANGES='${TOTAL_CHANGES}'" >> $BASH_ENV
      - run:
          name: Send Slack notification
          command: |
            if [ "$CHAIN_CHANGES_DETECTED" = "true" ]; then
              # Convert \n to actual newlines for better formatting
              FORMATTED_MESSAGE=$(echo -e "$SLACK_PARAM_MESSAGE")

              # Send to Slack using webhook
              curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"$FORMATTED_MESSAGE\"}" \
                "$<< parameters.slack_webhook_url >>"

              echo "‚úÖ Slack notification sent successfully"
            else
              echo "No changes detected, skipping Slack notification"
            fi
      - run:
          name: Send GitHub commit comment
          command: |
            if [ "$CHAIN_CHANGES_DETECTED" = "true" ]; then
              # Convert \n to actual newlines for GitHub markdown
              FORMATTED_GITHUB_MESSAGE=$(echo -e "$GITHUB_PARAM_MESSAGE")

              # Create JSON payload for GitHub API
              GITHUB_PAYLOAD=$(jq -n \
                --arg body "$FORMATTED_GITHUB_MESSAGE" \
                '{body: $body}')

              # Post comment to the commit
              curl -X POST \
                -H "Authorization: token $<< parameters.github_token >>" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                -d "$GITHUB_PAYLOAD" \
                "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commits/${CIRCLE_SHA1}/comments"

              echo "‚úÖ GitHub commit comment posted successfully"
            else
              echo "No changes detected, skipping GitHub notification"
            fi
      - run:
          name: Create GitHub issue (optional)
          command: |
            if [ "$CHAIN_CHANGES_DETECTED" = "true" ] && [ "$TOTAL_CHANGES" -gt 0 ]; then
              # Create a summary issue for significant changes
              ISSUE_TITLE="üîÑ Chain Registry Changes - $(date '+%Y-%m-%d')"
              ISSUE_BODY="$GITHUB_PARAM_MESSAGE"
              ISSUE_BODY="${ISSUE_BODY}\n\n---\n*This issue was automatically created by CircleCI when chain changes were detected.*"

              ISSUE_PAYLOAD=$(jq -n \
                --arg title "$ISSUE_TITLE" \
                --arg body "$(echo -e "$ISSUE_BODY")" \
                --argjson labels '["automated", "chain-registry", "notification"]' \
                '{title: $title, body: $body, labels: $labels}')

              # Create the issue
              curl -X POST \
                -H "Authorization: token $<< parameters.github_token >>" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                -d "$ISSUE_PAYLOAD" \
                "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues"

              echo "‚úÖ GitHub issue created successfully"
            else
              echo "Skipping GitHub issue creation"
            fi

workflows:
  main:
    jobs:
      - go-lint-test:
          name: go-lint-test-ops
          package: ops
      - go-lint-test:
          name: go-lint-test-validation
          package: validation
      - run-tool:
          name: check-genesis-integrity
          tool: check_genesis_integrity
      - check-codegen:
          name: check-codegen
      - run-tool:
          name: check-depsets
          tool: check_depsets
          requires:
            - check-codegen
      - run-tool:
          name: check-staging-synced
          tool: sync_staging
          args: --l1-rpc-urls="<< pipeline.parameters.sepolia_rpc_url >>,<< pipeline.parameters.mainnet_rpc_url >>"
          check_diff: true
      - check-staging-empty:
          name: check-staging-empty
      - run-tool:
          name: check-apply-hardforks
          tool: apply_hardforks
          check_diff: true
      - run-tool:
          name: check-chainlist
          tool: check_chainlist
      - run-staging-report:
          name: run-staging-report

  notify-when-chain-is-added-to-registry:
    jobs:
      - notify-when-chain-is-added-to-registry:
          context: circleci-repo-superchain-registry