version: 2.1

# This allows us to use CircleCI's dynamic configuration feature
setup: true

orbs:
  continuation: circleci/continuation@0.3.1

jobs:
  setup-genesis-allocs-validation:
    macos:
      xcode: 14.2.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: Generate list of chain IDs and insert into continue_config.yml file
          command: |
            bash validation/genesis/validation-inputs/generate-test-config.sh
      - continuation/continue:
          configuration_path: .circleci/continue_config.yml
          parameters: "{}"

  compute-config-diff-and-report-with-pr-comment:
    docker:
      - image: cimg/go:1.22
    parameters:
      command:
        description: "Command to run to generate config files"
        type: string
      directory:
        description: "Directory where config files are stored"
        type: string
      message:
        description: "PR comment body prefixed message"
        type: string
    steps:
      - checkout

      - run:
          name: Install Python and Poetry
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            python3 -m pip install --upgrade pip
            pip3 install poetry

      - run:
          name: Get circleci tools and set initial environment variables
          command: |
            git clone --branch main --depth 1 https://github.com/ethereum-optimism/circleci-utils.git /tmp/circleci-utils
            GITHUB_CLI_PATH=/tmp/circleci-utils/github_utility/github_cli
            cd $GITHUB_CLI_PATH
            poetry install

            echo "export GITHUB_CLI_PATH=$GITHUB_CLI_PATH" >> $BASH_ENV
            REPO="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
            echo "export REPO=$REPO" >> $BASH_ENV
            PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed 's|.*/||')
            echo "export PR_NUMBER=$PR_NUMBER" >> $BASH_ENV
            cd $GITHUB_CLI_PATH

      - run:
          name: Fetch all branches
          command: |
            git fetch --all
      - run:
          name: Generate configs at HEAD
          working_directory: validation
          command: |
            go run <<parameters.command>>/main.go HEAD
      - run:
          name: Generate configs on base branch
          command: |
            cd $GITHUB_CLI_PATH
            RES=$( poetry run github-cli get-pr-base-sha \
              --github-token "${STALE_GITHUB_TOKEN}" \
              --repo "${REPO}" \
              --pr-number "${PR_NUMBER}" )
            #check if RES does not contain error, continue otherwise exit
            if [[ $RES == *"error"* ]]; then
              echo "Error: $RES"
              exit 1
            fi
            echo "export BASE_REV=$RES" >> $BASH_ENV
      - run:
          name: Generate configs on base branch
          working_directory: validation
          command: |
            echo "Base branch revision: $BASE_REV"
            git checkout $BASE_REV
            go run <<parameters.command>>/main.go base
      - run:
          name: Compute diff
          working_directory: validation
          command: |
            ./scripts/diff-configs.sh <<parameters.directory>>/output-base <<parameters.directory>>/output-HEAD
          when: always
      - run:
          name: If command failed, create or update comment on PR
          when: on_fail
          command: |
            RUN_ID=${CIRCLE_WORKFLOW_ID}
            RUN_URL="https://app.circleci.com/pipelines/workflows/$RUN_ID"
            COMMENT_BODY="<<parameters.message>>. You can see the detail [here]($RUN_URL)."

            cd $GITHUB_CLI_PATH
            COMMENT_ID=$( poetry run github-cli get-pr-comments \
              --github-token "${STALE_GITHUB_TOKEN}" \
              --repo "${REPO}" \
              --pr-number "${PR_NUMBER}" \
              --message-substring "${COMMENT_BODY}" \
              --user-type "Bot" )

            COMMENT_ID=$(echo "$COMMENT_ID" | tr -d ' \n' | cut -d',' -f1)
            echo "--repo ${REPO} --pr-number ${PR_NUMBER} --comment-body ${COMMENT_BODY} --comment-id $COMMENT_ID"

            if [ -n "$COMMENT_ID" ]; then
              poetry run github-cli post-pr-comment \
                --github-token "${STALE_GITHUB_TOKEN}" \
                --repo "${REPO}" \
                --pr-number "${PR_NUMBER}" \
                --comment-body "${COMMENT_BODY}" \
                --comment-id $COMMENT_ID
            else
              poetry run github-cli post-pr-comment \
                --github-token "${STALE_GITHUB_TOKEN}" \
                --repo "${REPO}" \
                --pr-number "${PR_NUMBER}" \
                --comment-body "${COMMENT_BODY}"
            fi
      - run:
          name: If command passed, remove a comment on the PR if it exists
          when: on_success
          command: |
            cd $GITHUB_CLI_PATH
            # testing again
            # Delete the comment

workflows:
  setup:
    jobs:
      - setup-genesis-allocs-validation
      - compute-config-diff-and-report-with-pr-comment:
          name: compute-genesis-diff
          command: "generate-genesis"
          directory: "generate-genesis"
          message: "Detected nonzero diff in genesis. This PR modifies the genesis data of at least one chain in the registry, which may or may not have been intended"
          context: github-token-stale-check
      # - compute-config-diff-and-report-with-pr-comment:
      #     name: compute-rollup-config-diff
      #     command: "generate-rollup-config"
      #     directory: "generate-rollup-config"
      #     message: "Detected nonzero diff in rollup config. This PR modifies the configuration of at least one chain in the registry, which may or may not have been intended"
      #     context: github-token-stale-check
