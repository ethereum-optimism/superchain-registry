package cmd

import (
	"encoding/json"
	"fmt"
	"math/big"
	"os"
	"path/filepath"
	"reflect"

	"github.com/ethereum-optimism/superchain-registry/add-chain/flags"
	"github.com/ethereum/go-ethereum/core"
	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/urfave/cli/v2"
)

var CheckGenesisConfigCmd = cli.Command{
	Name:  "check-genesis-config",
	Flags: []cli.Flag{flags.GenesisConfigFlag, flags.ChainIdFlag},
	Usage: "Sanity check genesis config (genesis.json) is reproducible",
	Action: func(ctx *cli.Context) error {
		genesisPath := ctx.String(flags.GenesisConfigFlag.Name)
		fmt.Printf("Attempting to read from %s\n", genesisPath)
		file, err := os.ReadFile(genesisPath)
		if err != nil {
			return fmt.Errorf("failed to read from local genesis.json config file: %w", err)
		}
		var localGenesis *core.Genesis
		if err = json.Unmarshal(file, &localGenesis); err != nil {
			return fmt.Errorf("failed to unmarshal local genesis.json into core.Genesis struct: %w", err)
		}

		chainId := ctx.Uint64(flags.ChainIdFlag.Name)
		gethGenesis, err := core.LoadOPStackGenesis(chainId)
		if err != nil {
			return fmt.Errorf("failed to load genesis via op-geth: %w", err)
		}

		opts := cmp.Options{
			// ExcessBlobGas, BlobGasUsed: allow &0 == nil
			cmp.FilterPath(func(p cmp.Path) bool {
				field, ok := p.Last().(cmp.StructField)
				if !ok {
					return false
				}
				return field.Name() == "ExcessBlobGas" || field.Name() == "BlobGasUsed"
			}, cmp.Comparer(func(x, y *uint64) bool {
				if x == nil && y != nil {
					return *y == 0
				}
				if y == nil && x != nil {
					return *x == 0
				}
				return reflect.DeepEqual(x, y)
			})),
			cmpopts.IgnoreUnexported(big.Int{}),
		}

		if diff := cmp.Diff(localGenesis, gethGenesis, opts...); diff != "" {
			return fmt.Errorf("local genesis.json (-) does not match config generated by op-geth (+): %s", diff)
		}

		fmt.Println("Regenerated genesis config matches existing one")
		return nil
	},
}

func writeGenesisJSON(genesis *core.Genesis) error {
	filePath := filepath.Join("op-sepolia-genesis.json")
	file, err := os.Create(filePath)
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer file.Close()

	// Marshal the map to JSON
	jsonData, err := json.MarshalIndent(genesis, "", "  ")
	if err != nil {
		return fmt.Errorf("failed to marshal json: %w", err)
	}

	// Write the JSON data to the file
	if _, err := file.Write(jsonData); err != nil {
		return fmt.Errorf("failed to write json to file: %w", err)
	}
	fmt.Printf("Contract addresses written to: %s\n", filePath)

	return nil
}
