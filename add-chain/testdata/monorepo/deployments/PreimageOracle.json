{
  "abi": [
    {
      "type": "constructor",
      "inputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "CHALLENGE_PERIOD",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "KECCAK_TREE_DEPTH",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "MAX_LEAF_COUNT",
      "inputs": [],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "addLeavesLPP",
      "inputs": [
        {
          "name": "_uuid",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_input",
          "type": "bytes",
          "internalType": "bytes"
        },
        {
          "name": "_stateCommitments",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        },
        {
          "name": "_finalize",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "challengeFirstLPP",
      "inputs": [
        {
          "name": "_claimant",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_uuid",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_postState",
          "type": "tuple",
          "internalType": "struct PreimageOracle.Leaf",
          "components": [
            {
              "name": "input",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "index",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "stateCommitment",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        },
        {
          "name": "_postStateProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "challengeLPP",
      "inputs": [
        {
          "name": "_claimant",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_uuid",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_stateMatrix",
          "type": "tuple",
          "internalType": "struct LibKeccak.StateMatrix",
          "components": [
            {
              "name": "state",
              "type": "uint64[25]",
              "internalType": "uint64[25]"
            }
          ]
        },
        {
          "name": "_preState",
          "type": "tuple",
          "internalType": "struct PreimageOracle.Leaf",
          "components": [
            {
              "name": "input",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "index",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "stateCommitment",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        },
        {
          "name": "_preStateProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        },
        {
          "name": "_postState",
          "type": "tuple",
          "internalType": "struct PreimageOracle.Leaf",
          "components": [
            {
              "name": "input",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "index",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "stateCommitment",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        },
        {
          "name": "_postStateProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "getTreeRootLPP",
      "inputs": [
        {
          "name": "_owner",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_uuid",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "treeRoot_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "initLPP",
      "inputs": [
        {
          "name": "_uuid",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_partOffset",
          "type": "uint32",
          "internalType": "uint32"
        },
        {
          "name": "_claimedSize",
          "type": "uint32",
          "internalType": "uint32"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "loadKeccak256PreimagePart",
      "inputs": [
        {
          "name": "_partOffset",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_preimage",
          "type": "bytes",
          "internalType": "bytes"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "loadLocalData",
      "inputs": [
        {
          "name": "_ident",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_localContext",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_word",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_size",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_partOffset",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "key_",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "preimageLengths",
      "inputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "preimagePartOk",
      "inputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bool",
          "internalType": "bool"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "preimageParts",
      "inputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposalBlocks",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "uint64",
          "internalType": "uint64"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposalBlocksLen",
      "inputs": [
        {
          "name": "_claimant",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_uuid",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "len_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposalBranches",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposalCount",
      "inputs": [],
      "outputs": [
        {
          "name": "count_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposalMetadata",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "LPPMetaData"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposalParts",
      "inputs": [
        {
          "name": "",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "proposals",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "claimant",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "uuid",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "readPreimage",
      "inputs": [
        {
          "name": "_key",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "_offset",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "dat_",
          "type": "bytes32",
          "internalType": "bytes32"
        },
        {
          "name": "datLen_",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "squeezeLPP",
      "inputs": [
        {
          "name": "_claimant",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_uuid",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_stateMatrix",
          "type": "tuple",
          "internalType": "struct LibKeccak.StateMatrix",
          "components": [
            {
              "name": "state",
              "type": "uint64[25]",
              "internalType": "uint64[25]"
            }
          ]
        },
        {
          "name": "_preState",
          "type": "tuple",
          "internalType": "struct PreimageOracle.Leaf",
          "components": [
            {
              "name": "input",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "index",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "stateCommitment",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        },
        {
          "name": "_preStateProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        },
        {
          "name": "_postState",
          "type": "tuple",
          "internalType": "struct PreimageOracle.Leaf",
          "components": [
            {
              "name": "input",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "index",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "stateCommitment",
              "type": "bytes32",
              "internalType": "bytes32"
            }
          ]
        },
        {
          "name": "_postStateProof",
          "type": "bytes32[]",
          "internalType": "bytes32[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "zeroHashes",
      "inputs": [
        {
          "name": "",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [
        {
          "name": "",
          "type": "bytes32",
          "internalType": "bytes32"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "error",
      "name": "ActiveProposal",
      "inputs": []
    },
    {
      "type": "error",
      "name": "AlreadyFinalized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "BadProposal",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidInputSize",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidPreimage",
      "inputs": []
    },
    {
      "type": "error",
      "name": "InvalidProof",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotEOA",
      "inputs": []
    },
    {
      "type": "error",
      "name": "NotInitialized",
      "inputs": []
    },
    {
      "type": "error",
      "name": "PartOffsetOOB",
      "inputs": []
    },
    {
      "type": "error",
      "name": "PostStateMatches",
      "inputs": []
    },
    {
      "type": "error",
      "name": "StatesNotContiguous",
      "inputs": []
    },
    {
      "type": "error",
      "name": "TreeSizeOverflow",
      "inputs": []
    }
  ],
  "address": "0x2C7057D1A65c306C9A6E64b67FDF9f6aC41Cc2cc",
  "args": [],
  "bytecode": "0x60806040523480156200001157600080fd5b5060005b6200002360016010620000db565b811015620000be5760038160108110620000415762000041620000f5565b015460038260108110620000595762000059620000f5565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012060038260016200009491906200010b565b60108110620000a757620000a7620000f5565b015580620000b58162000126565b91505062000015565b5062000142565b634e487b7160e01b600052601160045260246000fd5b600082821015620000f057620000f0620000c5565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115620001215762000121620000c5565b500190565b6000600182016200013b576200013b620000c5565b5060010190565b612ece80620001526000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80639d53a648116100e3578063da35c6641161008c578063ec5efcbc11610066578063ec5efcbc146103f5578063faf37bc714610408578063fef2b4ed1461041b57600080fd5b8063da35c664146103b2578063e03110e1146103ba578063e1592611146103e257600080fd5b8063b4801e61116100bd578063b4801e6114610382578063c3a079ed14610395578063d18534b51461039f57600080fd5b80639d53a648146103025780639f99ef8214610344578063b2e67ba81461035757600080fd5b806352f0f3ad116101455780637ac547671161011f5780637ac54767146102855780638542cf5014610298578063882856ef146102d657600080fd5b806352f0f3ad1461021c57806361238bde1461022f5780636551927b1461025a57600080fd5b80632055b36b116101765780632055b36b146101f75780633909af5c146101ff5780634d52b4c91461021457600080fd5b8063013cf08b146101925780630359a563146101d6575b600080fd5b6101a56101a036600461251c565b61043b565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152015b60405180910390f35b6101e96101e436600461255e565b610480565b6040519081526020016101cd565b6101e9601081565b61021261020d366004612759565b6105b8565b005b6101e9610806565b6101e961022a366004612845565b610821565b6101e961023d366004612880565b600160209081526000928352604080842090915290825290205481565b6101e961026836600461255e565b601560209081526000928352604080842090915290825290205481565b6101e961029336600461251c565b6108f6565b6102c66102a6366004612880565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101cd565b6102e96102e43660046128a2565b61090d565b60405167ffffffffffffffff90911681526020016101cd565b6101e961031036600461255e565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152601760209081526040808320938352929052205490565b610212610352366004612917565b610967565b6101e961036536600461255e565b601660209081526000928352604080842090915290825290205481565b6101e96103903660046128a2565b610ee2565b6101e96201518081565b6102126103ad366004612759565b610f14565b6013546101e9565b6103cd6103c8366004612880565b6112c2565b604080519283526020830191909152016101cd565b6102126103f03660046129a8565b6113b3565b6102126104033660046129f4565b6114bc565b610212610416366004612a8d565b611636565b6101e961042936600461251c565b60006020819052908152604090205481565b6013818154811061044b57600080fd5b60009182526020909120600290910201805460019091015473ffffffffffffffffffffffffffffffffffffffff909116915082565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260156020908152604080832084845290915281205481906104c39060601c63ffffffff1690565b63ffffffff16905060005b60108110156105b057816001166001036105565773ffffffffffffffffffffffffffffffffffffffff851660009081526014602090815260408083208784529091529020816010811061052357610523612ac9565b01546040805160208101929092528101849052606001604051602081830303815290604052805190602001209250610597565b826003826010811061056a5761056a612ac9565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012092505b60019190911c90806105a881612b27565b9150506104ce565b505092915050565b60006105c48a8a610480565b90506105e786868360208b01356105e26105dd8d612b5f565b6117e9565b611829565b8015610605575061060583838360208801356105e26105dd8a612b5f565b61063b576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660400135886040516020016106519190612c2e565b604051602081830303815290604052805190602001201461069e576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360200135876020013560016106b49190612c6c565b146106eb576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610733886106f98680612c84565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188a92505050565b61073c886119e5565b8360400135886040516020016107529190612c2e565b604051602081830303815290604052805190602001200361079f576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9590951660009081526015602090815260408083209683529590529390932080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550505050565b600161081460106002612e0b565b61081e9190612e17565b81565b600061082d8686612281565b905061083a836008612c6c565b8211806108475750602083115b1561087e576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602081815260c085901b82526008959095528251828252600286526040808320858452875280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558484528752808320948352938652838220558181529384905292205592915050565b6003816010811061090657600080fd5b0154905081565b6017602052826000526040600020602052816000526040600020818154811061093557600080fd5b906000526020600020906004918282040191900660080292509250509054906101000a900467ffffffffffffffff1681565b3332146109a0576040517fba092d1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081156109b9576109b2868661232e565b90506109f3565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293505050505b3360009081526014602090815260408083208a845290915280822081516102008101928390529160109082845b815481526020019060010190808311610a205750503360009081526015602090815260408083208f8452909152902054939450610a6292508391506123a79050565b63ffffffff16600003610aa1576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aab8160c01c90565b67ffffffffffffffff1615610aec576040517f475a253500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610afe8260a01c63ffffffff1690565b67ffffffffffffffff1690506000610b1c8360401c63ffffffff1690565b63ffffffff169050600882108015610b32575080155b15610bb9576000610b498460801c63ffffffff1690565b905060008160c01b6000528b356008528351905080601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f8152602001908152602001600020819055505050610c6e565b60088210158015610bd7575080610bd1600884612e17565b92508210155b8015610beb5750610be88982612c6c565b82105b15610c6e576000610bfc8284612e17565b905089610c0a826020612c6c565b10158015610c16575086155b15610c4d576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526016602090815260408083208f84529091529020908b013590555b6000610c808460601c63ffffffff1690565b63ffffffff169050855160208701608882048a1415608883061715610cad576307b1daf16000526004601cfd5b60405160c8810160405260005b83811015610d5d578083018051835260208101516020840152604081015160408401526060810151606084015260808101516080840152508460888301526088810460051b8d013560a883015260c882206001860195508560005b610200811015610d52576001821615610d325782818d0152610d52565b8b81015160009081526020938452604090209260019290921c9101610d15565b505050608801610cba565b50505050600160106002610d719190612e0b565b610d7b9190612e17565b811115610db4576040517f6229572300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526014602090815260408083208f84529091529020610dda90866010612492565b503360009081526017602090815260408083208f845282528220805460018101825590835291206004820401805460039092166008026101000a67ffffffffffffffff818102199093164390931602919091179055610e8e610e3c838c612c6c565b60401b7fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff606084901b167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff8716171790565b93508615610eb95777ffffffffffffffffffffffffffffffffffffffffffffffff84164260c01b1793505b50503360009081526015602090815260408083209c83529b905299909920555050505050505050565b60146020528260005260406000206020528160005260406000208160108110610f0a57600080fd5b0154925083915050565b73ffffffffffffffffffffffffffffffffffffffff891660009081526015602090815260408083208b845290915290205467ffffffffffffffff811615610f87576040517fc334f06900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62015180610f958260c01c90565b610fa99067ffffffffffffffff1642612e17565b11610fe0576040517f55d4cbf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610fec8b8b610480565b905061100587878360208c01356105e26105dd8e612b5f565b8015611023575061102384848360208901356105e26105dd8b612b5f565b611059576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87604001358960405160200161106f9190612c2e565b60405160208183030381529060405280519060200120146110bc576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8460200135886020013560016110d29190612c6c565b141580611104575060016110ec8360601c63ffffffff1690565b6110f69190612e2e565b63ffffffff16856020013514155b1561113b576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061114d8360801c63ffffffff1690565b63ffffffff169050806111668460401c63ffffffff1690565b63ffffffff16146111a3576040517f7b1dafd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111b18a6106f98880612c84565b6111ba8a6119e5565b60006111c58b6123b3565b905060006111d98560a01c63ffffffff1690565b67ffffffffffffffff169050600160026000848152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908315150217905550601660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8152602001908152602001600020546001600084815260200190815260200160002060008381526020019081526020016000208190555082600080848152602001908152602001600020819055505050505050505050505050505050565b6000828152600260209081526040808320848452909152812054819060ff1661134b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7072652d696d616765206d757374206578697374000000000000000000000000604482015260640160405180910390fd5b5060008381526020818152604090912054611367816008612c6c565b611372856020612c6c565b106113905783611383826008612c6c565b61138d9190612e17565b91505b506000938452600160209081526040808620948652939052919092205492909150565b604435600080600883018611156113d25763fe2549876000526004601cfd5b60c083901b6080526088838682378087017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80151908490207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f02000000000000000000000000000000000000000000000000000000000000001760008181526002602090815260408083208b8452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584845282528083209a83529981528982209390935590815290819052959095209190915550505050565b60006114c88686610480565b90506114e183838360208801356105e26105dd8a612b5f565b611517576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602084013515611553576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61155b6124d0565b611569816106f98780612c84565b611572816119e5565b8460400135816040516020016115889190612c2e565b60405160208183030381529060405280519060200120036115d5576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9290921660009081526015602090815260408083209383529290522080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550565b33321461166f576040517fba092d1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61167a816008612e53565b63ffffffff168263ffffffff16106116be576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152601560209081526040808320878452825280832080547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1660a09790971b7fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff169690961760809590951b9490941790945582518084019093529082529181019283526013805460018101825592525160029091027f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0908101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921790915590517f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09190910155565b600081600001518260200151836040015160405160200161180c93929190612e7b565b604051602081830303815290604052805190602001209050919050565b60008160005b601081101561187d578060051b880135600186831c16600181146118625760008481526020839052604090209350611873565b600082815260208590526040902093505b505060010161182f565b5090931495945050505050565b608881511461189857600080fd5b6020810160208301611919565b8260031b8201518060001a8160011a60081b178160021a60101b8260031a60181b17178160041a60201b8260051a60281b178260061a60301b8360071a60381b1717179050611913816118fe868560059190911b015190565b1867ffffffffffffffff16600586901b840152565b50505050565b611925600083836118a5565b611931600183836118a5565b61193d600283836118a5565b611949600383836118a5565b611955600483836118a5565b611961600583836118a5565b61196d600683836118a5565b611979600783836118a5565b611985600883836118a5565b611991600983836118a5565b61199d600a83836118a5565b6119a9600b83836118a5565b6119b5600c83836118a5565b6119c1600d83836118a5565b6119cd600e83836118a5565b6119d9600f83836118a5565b611913601083836118a5565b6040805178010000000000008082800000000000808a8000000080008000602082015279808b00000000800000018000000080008081800000000000800991810191909152788a00000000000000880000000080008009000000008000000a60608201527b8000808b800000000000008b8000000000008089800000000000800360808201527f80000000000080028000000000000080000000000000800a800000008000000a60a08201527f800000008000808180000000000080800000000080000001800000008000800860c082015260009060e00160405160208183030381529060405290506020820160208201612161565b6102808101516101e082015161014083015160a0840151845118189118186102a082015161020083015161016084015160c0850151602086015118189118186102c083015161022084015161018085015160e0860151604087015118189118186102e08401516102408501516101a0860151610100870151606088015118189118186103008501516102608601516101c0870151610120880151608089015118189118188084603f1c611b988660011b67ffffffffffffffff1690565b18188584603f1c611bb38660011b67ffffffffffffffff1690565b18188584603f1c611bce8660011b67ffffffffffffffff1690565b181895508483603f1c611beb8560011b67ffffffffffffffff1690565b181894508387603f1c611c088960011b67ffffffffffffffff1690565b60208b01518b51861867ffffffffffffffff168c5291189190911897508118600181901b603f9190911c18935060c08801518118601481901c602c9190911b1867ffffffffffffffff1660208901526101208801518718602c81901c60149190911b1867ffffffffffffffff1660c08901526102c08801518618600381901c603d9190911b1867ffffffffffffffff166101208901526101c08801518718601981901c60279190911b1867ffffffffffffffff166102c08901526102808801518218602e81901c60129190911b1867ffffffffffffffff166101c089015260408801518618600281901c603e9190911b1867ffffffffffffffff166102808901526101808801518618601581901c602b9190911b1867ffffffffffffffff1660408901526101a08801518518602781901c60199190911b1867ffffffffffffffff166101808901526102608801518718603881901c60089190911b1867ffffffffffffffff166101a08901526102e08801518518600881901c60389190911b1867ffffffffffffffff166102608901526101e08801518218601781901c60299190911b1867ffffffffffffffff166102e089015260808801518718602581901c601b9190911b1867ffffffffffffffff166101e08901526103008801518718603281901c600e9190911b1867ffffffffffffffff1660808901526102a08801518118603e81901c60029190911b1867ffffffffffffffff166103008901526101008801518518600981901c60379190911b1867ffffffffffffffff166102a08901526102008801518118601381901c602d9190911b1867ffffffffffffffff1661010089015260a08801518218601c81901c60249190911b1867ffffffffffffffff1661020089015260608801518518602481901c601c9190911b1867ffffffffffffffff1660a08901526102408801518518602b81901c60159190911b1867ffffffffffffffff1660608901526102208801518618603181901c600f9190911b1867ffffffffffffffff166102408901526101608801518118603681901c600a9190911b1867ffffffffffffffff166102208901525060e08701518518603a81901c60069190911b1867ffffffffffffffff166101608801526101408701518118603d81901c60039190911b1867ffffffffffffffff1660e0880152505067ffffffffffffffff81166101408601525050505050565b611f8881611adb565b805160208201805160408401805160608601805160808801805167ffffffffffffffff871986168a188116808c528619851689188216909952831982169095188516909552841988169091188316909152941990921618811690925260a08301805160c0808601805160e0880180516101008a0180516101208c018051861985168a188d16909a528319821686188c16909652801989169092188a169092528619861618881690529219909216909218841690526101408401805161016086018051610180880180516101a08a0180516101c08c0180518619851689188d169099528319821686188c16909652801988169092188a169092528519851618881690529119909116909118841690526101e08401805161020086018051610220880180516102408a0180516102608c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052610280840180516102a0860180516102c0880180516102e08a0180516103008c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052600386901b850151901c9081189091168252611913565b61216d60008284611f7f565b61217960018284611f7f565b61218560028284611f7f565b61219160038284611f7f565b61219d60048284611f7f565b6121a960058284611f7f565b6121b560068284611f7f565b6121c160078284611f7f565b6121cd60088284611f7f565b6121d960098284611f7f565b6121e5600a8284611f7f565b6121f1600b8284611f7f565b6121fd600c8284611f7f565b612209600d8284611f7f565b612215600e8284611f7f565b612221600f8284611f7f565b61222d60108284611f7f565b61223960118284611f7f565b61224560128284611f7f565b61225160138284611f7f565b61225d60148284611f7f565b61226960158284611f7f565b61227560168284611f7f565b61191360178284611f7f565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831617612327818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b60606040519050816020820181810182868337608883068080156123775760888290038501848101848103803687375060806001820353506001845160001a178453865261238e565b608836843760018353608060878401536088850186525b5050505050601f19603f82510116810160405292915050565b60801c63ffffffff1690565b6000612436565b66ff00ff00ff00ff8160081c1667ff00ff00ff00ff006123e48360081b67ffffffffffffffff1690565b1617905065ffff0000ffff8160101c1667ffff0000ffff00006124118360101b67ffffffffffffffff1690565b1617905060008160201c61242f8360201b67ffffffffffffffff1690565b1792915050565b6080820151602083019061244e906123ba565b6123ba565b604082015161245c906123ba565b60401b1761247461244960018460059190911b015190565b825160809190911b90612486906123ba565b60c01b17179392505050565b82601081019282156124c0579160200282015b828111156124c05782518255916020019190600101906124a5565b506124cc9291506124e8565b5090565b60405180602001604052806124e36124fd565b905290565b5b808211156124cc57600081556001016124e9565b6040518061032001604052806019906020820280368337509192915050565b60006020828403121561252e57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461255957600080fd5b919050565b6000806040838503121561257157600080fd5b61257a83612535565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610320810167ffffffffffffffff811182821017156125db576125db612588565b60405290565b6040516060810167ffffffffffffffff811182821017156125db576125db612588565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561264b5761264b612588565b604052919050565b600061032080838503121561266757600080fd5b604051602080820167ffffffffffffffff838210818311171561268c5761268c612588565b8160405283955087601f8801126126a257600080fd5b6126aa6125b7565b94870194915081888611156126be57600080fd5b875b868110156126e657803583811681146126d95760008081fd5b84529284019284016126c0565b50909352509295945050505050565b60006060828403121561270757600080fd5b50919050565b60008083601f84011261271f57600080fd5b50813567ffffffffffffffff81111561273757600080fd5b6020830191508360208260051b850101111561275257600080fd5b9250929050565b60008060008060008060008060006103e08a8c03121561277857600080fd5b6127818a612535565b985060208a013597506127978b60408c01612653565b96506103608a013567ffffffffffffffff808211156127b557600080fd5b6127c18d838e016126f5565b97506103808c01359150808211156127d857600080fd5b6127e48d838e0161270d565b90975095506103a08c01359150808211156127fe57600080fd5b61280a8d838e016126f5565b94506103c08c013591508082111561282157600080fd5b5061282e8c828d0161270d565b915080935050809150509295985092959850929598565b600080600080600060a0868803121561285d57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806040838503121561289357600080fd5b50508035926020909101359150565b6000806000606084860312156128b757600080fd5b6128c084612535565b95602085013595506040909401359392505050565b60008083601f8401126128e757600080fd5b50813567ffffffffffffffff8111156128ff57600080fd5b60208301915083602082850101111561275257600080fd5b6000806000806000806080878903121561293057600080fd5b86359550602087013567ffffffffffffffff8082111561294f57600080fd5b61295b8a838b016128d5565b9097509550604089013591508082111561297457600080fd5b5061298189828a0161270d565b9094509250506060870135801515811461299a57600080fd5b809150509295509295509295565b6000806000604084860312156129bd57600080fd5b83359250602084013567ffffffffffffffff8111156129db57600080fd5b6129e7868287016128d5565b9497909650939450505050565b600080600080600060808688031215612a0c57600080fd5b612a1586612535565b945060208601359350604086013567ffffffffffffffff80821115612a3957600080fd5b612a4589838a016126f5565b94506060880135915080821115612a5b57600080fd5b50612a688882890161270d565b969995985093965092949392505050565b803563ffffffff8116811461255957600080fd5b600080600060608486031215612aa257600080fd5b83359250612ab260208501612a79565b9150612ac060408501612a79565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b5857612b58612af8565b5060010190565b600060608236031215612b7157600080fd5b612b796125e1565b823567ffffffffffffffff80821115612b9157600080fd5b9084019036601f830112612ba457600080fd5b8135602082821115612bb857612bb8612588565b612be8817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601612604565b92508183523681838601011115612bfe57600080fd5b81818501828501376000918301810191909152908352848101359083015250604092830135928101929092525090565b81516103208201908260005b6019811015612c6357825167ffffffffffffffff16825260209283019290910190600101612c3a565b50505092915050565b60008219821115612c7f57612c7f612af8565b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612cb957600080fd5b83018035915067ffffffffffffffff821115612cd457600080fd5b60200191503681900382131561275257600080fd5b600181815b80851115612d4257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612d2857612d28612af8565b80851615612d3557918102915b93841c9390800290612cee565b509250929050565b600082612d5957506001612e05565b81612d6657506000612e05565b8160018114612d7c5760028114612d8657612da2565b6001915050612e05565b60ff841115612d9757612d97612af8565b50506001821b612e05565b5060208310610133831016604e8410600b8410161715612dc5575081810a612e05565b612dcf8383612ce9565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612e0157612e01612af8565b0290505b92915050565b60006123278383612d4a565b600082821015612e2957612e29612af8565b500390565b600063ffffffff83811690831681811015612e4b57612e4b612af8565b039392505050565b600063ffffffff808316818516808303821115612e7257612e72612af8565b01949350505050565b6000845160005b81811015612e9c5760208188018101518583015201612e82565b81811115612eab576000828501525b509190910192835250602082015260400191905056fea164736f6c634300080f000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c80639d53a648116100e3578063da35c6641161008c578063ec5efcbc11610066578063ec5efcbc146103f5578063faf37bc714610408578063fef2b4ed1461041b57600080fd5b8063da35c664146103b2578063e03110e1146103ba578063e1592611146103e257600080fd5b8063b4801e61116100bd578063b4801e6114610382578063c3a079ed14610395578063d18534b51461039f57600080fd5b80639d53a648146103025780639f99ef8214610344578063b2e67ba81461035757600080fd5b806352f0f3ad116101455780637ac547671161011f5780637ac54767146102855780638542cf5014610298578063882856ef146102d657600080fd5b806352f0f3ad1461021c57806361238bde1461022f5780636551927b1461025a57600080fd5b80632055b36b116101765780632055b36b146101f75780633909af5c146101ff5780634d52b4c91461021457600080fd5b8063013cf08b146101925780630359a563146101d6575b600080fd5b6101a56101a036600461251c565b61043b565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152015b60405180910390f35b6101e96101e436600461255e565b610480565b6040519081526020016101cd565b6101e9601081565b61021261020d366004612759565b6105b8565b005b6101e9610806565b6101e961022a366004612845565b610821565b6101e961023d366004612880565b600160209081526000928352604080842090915290825290205481565b6101e961026836600461255e565b601560209081526000928352604080842090915290825290205481565b6101e961029336600461251c565b6108f6565b6102c66102a6366004612880565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101cd565b6102e96102e43660046128a2565b61090d565b60405167ffffffffffffffff90911681526020016101cd565b6101e961031036600461255e565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152601760209081526040808320938352929052205490565b610212610352366004612917565b610967565b6101e961036536600461255e565b601660209081526000928352604080842090915290825290205481565b6101e96103903660046128a2565b610ee2565b6101e96201518081565b6102126103ad366004612759565b610f14565b6013546101e9565b6103cd6103c8366004612880565b6112c2565b604080519283526020830191909152016101cd565b6102126103f03660046129a8565b6113b3565b6102126104033660046129f4565b6114bc565b610212610416366004612a8d565b611636565b6101e961042936600461251c565b60006020819052908152604090205481565b6013818154811061044b57600080fd5b60009182526020909120600290910201805460019091015473ffffffffffffffffffffffffffffffffffffffff909116915082565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260156020908152604080832084845290915281205481906104c39060601c63ffffffff1690565b63ffffffff16905060005b60108110156105b057816001166001036105565773ffffffffffffffffffffffffffffffffffffffff851660009081526014602090815260408083208784529091529020816010811061052357610523612ac9565b01546040805160208101929092528101849052606001604051602081830303815290604052805190602001209250610597565b826003826010811061056a5761056a612ac9565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012092505b60019190911c90806105a881612b27565b9150506104ce565b505092915050565b60006105c48a8a610480565b90506105e786868360208b01356105e26105dd8d612b5f565b6117e9565b611829565b8015610605575061060583838360208801356105e26105dd8a612b5f565b61063b576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660400135886040516020016106519190612c2e565b604051602081830303815290604052805190602001201461069e576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360200135876020013560016106b49190612c6c565b146106eb576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610733886106f98680612c84565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061188a92505050565b61073c886119e5565b8360400135886040516020016107529190612c2e565b604051602081830303815290604052805190602001200361079f576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9590951660009081526015602090815260408083209683529590529390932080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550505050565b600161081460106002612e0b565b61081e9190612e17565b81565b600061082d8686612281565b905061083a836008612c6c565b8211806108475750602083115b1561087e576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602081815260c085901b82526008959095528251828252600286526040808320858452875280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558484528752808320948352938652838220558181529384905292205592915050565b6003816010811061090657600080fd5b0154905081565b6017602052826000526040600020602052816000526040600020818154811061093557600080fd5b906000526020600020906004918282040191900660080292509250509054906101000a900467ffffffffffffffff1681565b3332146109a0576040517fba092d1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606081156109b9576109b2868661232e565b90506109f3565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293505050505b3360009081526014602090815260408083208a845290915280822081516102008101928390529160109082845b815481526020019060010190808311610a205750503360009081526015602090815260408083208f8452909152902054939450610a6292508391506123a79050565b63ffffffff16600003610aa1576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aab8160c01c90565b67ffffffffffffffff1615610aec576040517f475a253500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610afe8260a01c63ffffffff1690565b67ffffffffffffffff1690506000610b1c8360401c63ffffffff1690565b63ffffffff169050600882108015610b32575080155b15610bb9576000610b498460801c63ffffffff1690565b905060008160c01b6000528b356008528351905080601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f8152602001908152602001600020819055505050610c6e565b60088210158015610bd7575080610bd1600884612e17565b92508210155b8015610beb5750610be88982612c6c565b82105b15610c6e576000610bfc8284612e17565b905089610c0a826020612c6c565b10158015610c16575086155b15610c4d576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526016602090815260408083208f84529091529020908b013590555b6000610c808460601c63ffffffff1690565b63ffffffff169050855160208701608882048a1415608883061715610cad576307b1daf16000526004601cfd5b60405160c8810160405260005b83811015610d5d578083018051835260208101516020840152604081015160408401526060810151606084015260808101516080840152508460888301526088810460051b8d013560a883015260c882206001860195508560005b610200811015610d52576001821615610d325782818d0152610d52565b8b81015160009081526020938452604090209260019290921c9101610d15565b505050608801610cba565b50505050600160106002610d719190612e0b565b610d7b9190612e17565b811115610db4576040517f6229572300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526014602090815260408083208f84529091529020610dda90866010612492565b503360009081526017602090815260408083208f845282528220805460018101825590835291206004820401805460039092166008026101000a67ffffffffffffffff818102199093164390931602919091179055610e8e610e3c838c612c6c565b60401b7fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff606084901b167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff8716171790565b93508615610eb95777ffffffffffffffffffffffffffffffffffffffffffffffff84164260c01b1793505b50503360009081526015602090815260408083209c83529b905299909920555050505050505050565b60146020528260005260406000206020528160005260406000208160108110610f0a57600080fd5b0154925083915050565b73ffffffffffffffffffffffffffffffffffffffff891660009081526015602090815260408083208b845290915290205467ffffffffffffffff811615610f87576040517fc334f06900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62015180610f958260c01c90565b610fa99067ffffffffffffffff1642612e17565b11610fe0576040517f55d4cbf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610fec8b8b610480565b905061100587878360208c01356105e26105dd8e612b5f565b8015611023575061102384848360208901356105e26105dd8b612b5f565b611059576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87604001358960405160200161106f9190612c2e565b60405160208183030381529060405280519060200120146110bc576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8460200135886020013560016110d29190612c6c565b141580611104575060016110ec8360601c63ffffffff1690565b6110f69190612e2e565b63ffffffff16856020013514155b1561113b576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061114d8360801c63ffffffff1690565b63ffffffff169050806111668460401c63ffffffff1690565b63ffffffff16146111a3576040517f7b1dafd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111b18a6106f98880612c84565b6111ba8a6119e5565b60006111c58b6123b3565b905060006111d98560a01c63ffffffff1690565b67ffffffffffffffff169050600160026000848152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff021916908315150217905550601660008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8152602001908152602001600020546001600084815260200190815260200160002060008381526020019081526020016000208190555082600080848152602001908152602001600020819055505050505050505050505050505050565b6000828152600260209081526040808320848452909152812054819060ff1661134b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7072652d696d616765206d757374206578697374000000000000000000000000604482015260640160405180910390fd5b5060008381526020818152604090912054611367816008612c6c565b611372856020612c6c565b106113905783611383826008612c6c565b61138d9190612e17565b91505b506000938452600160209081526040808620948652939052919092205492909150565b604435600080600883018611156113d25763fe2549876000526004601cfd5b60c083901b6080526088838682378087017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80151908490207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f02000000000000000000000000000000000000000000000000000000000000001760008181526002602090815260408083208b8452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584845282528083209a83529981528982209390935590815290819052959095209190915550505050565b60006114c88686610480565b90506114e183838360208801356105e26105dd8a612b5f565b611517576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602084013515611553576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61155b6124d0565b611569816106f98780612c84565b611572816119e5565b8460400135816040516020016115889190612c2e565b60405160208183030381529060405280519060200120036115d5576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9290921660009081526015602090815260408083209383529290522080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550565b33321461166f576040517fba092d1600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61167a816008612e53565b63ffffffff168263ffffffff16106116be576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000818152601560209081526040808320878452825280832080547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1660a09790971b7fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff169690961760809590951b9490941790945582518084019093529082529181019283526013805460018101825592525160029091027f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0908101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921790915590517f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09190910155565b600081600001518260200151836040015160405160200161180c93929190612e7b565b604051602081830303815290604052805190602001209050919050565b60008160005b601081101561187d578060051b880135600186831c16600181146118625760008481526020839052604090209350611873565b600082815260208590526040902093505b505060010161182f565b5090931495945050505050565b608881511461189857600080fd5b6020810160208301611919565b8260031b8201518060001a8160011a60081b178160021a60101b8260031a60181b17178160041a60201b8260051a60281b178260061a60301b8360071a60381b1717179050611913816118fe868560059190911b015190565b1867ffffffffffffffff16600586901b840152565b50505050565b611925600083836118a5565b611931600183836118a5565b61193d600283836118a5565b611949600383836118a5565b611955600483836118a5565b611961600583836118a5565b61196d600683836118a5565b611979600783836118a5565b611985600883836118a5565b611991600983836118a5565b61199d600a83836118a5565b6119a9600b83836118a5565b6119b5600c83836118a5565b6119c1600d83836118a5565b6119cd600e83836118a5565b6119d9600f83836118a5565b611913601083836118a5565b6040805178010000000000008082800000000000808a8000000080008000602082015279808b00000000800000018000000080008081800000000000800991810191909152788a00000000000000880000000080008009000000008000000a60608201527b8000808b800000000000008b8000000000008089800000000000800360808201527f80000000000080028000000000000080000000000000800a800000008000000a60a08201527f800000008000808180000000000080800000000080000001800000008000800860c082015260009060e00160405160208183030381529060405290506020820160208201612161565b6102808101516101e082015161014083015160a0840151845118189118186102a082015161020083015161016084015160c0850151602086015118189118186102c083015161022084015161018085015160e0860151604087015118189118186102e08401516102408501516101a0860151610100870151606088015118189118186103008501516102608601516101c0870151610120880151608089015118189118188084603f1c611b988660011b67ffffffffffffffff1690565b18188584603f1c611bb38660011b67ffffffffffffffff1690565b18188584603f1c611bce8660011b67ffffffffffffffff1690565b181895508483603f1c611beb8560011b67ffffffffffffffff1690565b181894508387603f1c611c088960011b67ffffffffffffffff1690565b60208b01518b51861867ffffffffffffffff168c5291189190911897508118600181901b603f9190911c18935060c08801518118601481901c602c9190911b1867ffffffffffffffff1660208901526101208801518718602c81901c60149190911b1867ffffffffffffffff1660c08901526102c08801518618600381901c603d9190911b1867ffffffffffffffff166101208901526101c08801518718601981901c60279190911b1867ffffffffffffffff166102c08901526102808801518218602e81901c60129190911b1867ffffffffffffffff166101c089015260408801518618600281901c603e9190911b1867ffffffffffffffff166102808901526101808801518618601581901c602b9190911b1867ffffffffffffffff1660408901526101a08801518518602781901c60199190911b1867ffffffffffffffff166101808901526102608801518718603881901c60089190911b1867ffffffffffffffff166101a08901526102e08801518518600881901c60389190911b1867ffffffffffffffff166102608901526101e08801518218601781901c60299190911b1867ffffffffffffffff166102e089015260808801518718602581901c601b9190911b1867ffffffffffffffff166101e08901526103008801518718603281901c600e9190911b1867ffffffffffffffff1660808901526102a08801518118603e81901c60029190911b1867ffffffffffffffff166103008901526101008801518518600981901c60379190911b1867ffffffffffffffff166102a08901526102008801518118601381901c602d9190911b1867ffffffffffffffff1661010089015260a08801518218601c81901c60249190911b1867ffffffffffffffff1661020089015260608801518518602481901c601c9190911b1867ffffffffffffffff1660a08901526102408801518518602b81901c60159190911b1867ffffffffffffffff1660608901526102208801518618603181901c600f9190911b1867ffffffffffffffff166102408901526101608801518118603681901c600a9190911b1867ffffffffffffffff166102208901525060e08701518518603a81901c60069190911b1867ffffffffffffffff166101608801526101408701518118603d81901c60039190911b1867ffffffffffffffff1660e0880152505067ffffffffffffffff81166101408601525050505050565b611f8881611adb565b805160208201805160408401805160608601805160808801805167ffffffffffffffff871986168a188116808c528619851689188216909952831982169095188516909552841988169091188316909152941990921618811690925260a08301805160c0808601805160e0880180516101008a0180516101208c018051861985168a188d16909a528319821686188c16909652801989169092188a169092528619861618881690529219909216909218841690526101408401805161016086018051610180880180516101a08a0180516101c08c0180518619851689188d169099528319821686188c16909652801988169092188a169092528519851618881690529119909116909118841690526101e08401805161020086018051610220880180516102408a0180516102608c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052610280840180516102a0860180516102c0880180516102e08a0180516103008c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052600386901b850151901c9081189091168252611913565b61216d60008284611f7f565b61217960018284611f7f565b61218560028284611f7f565b61219160038284611f7f565b61219d60048284611f7f565b6121a960058284611f7f565b6121b560068284611f7f565b6121c160078284611f7f565b6121cd60088284611f7f565b6121d960098284611f7f565b6121e5600a8284611f7f565b6121f1600b8284611f7f565b6121fd600c8284611f7f565b612209600d8284611f7f565b612215600e8284611f7f565b612221600f8284611f7f565b61222d60108284611f7f565b61223960118284611f7f565b61224560128284611f7f565b61225160138284611f7f565b61225d60148284611f7f565b61226960158284611f7f565b61227560168284611f7f565b61191360178284611f7f565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831617612327818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b60606040519050816020820181810182868337608883068080156123775760888290038501848101848103803687375060806001820353506001845160001a178453865261238e565b608836843760018353608060878401536088850186525b5050505050601f19603f82510116810160405292915050565b60801c63ffffffff1690565b6000612436565b66ff00ff00ff00ff8160081c1667ff00ff00ff00ff006123e48360081b67ffffffffffffffff1690565b1617905065ffff0000ffff8160101c1667ffff0000ffff00006124118360101b67ffffffffffffffff1690565b1617905060008160201c61242f8360201b67ffffffffffffffff1690565b1792915050565b6080820151602083019061244e906123ba565b6123ba565b604082015161245c906123ba565b60401b1761247461244960018460059190911b015190565b825160809190911b90612486906123ba565b60c01b17179392505050565b82601081019282156124c0579160200282015b828111156124c05782518255916020019190600101906124a5565b506124cc9291506124e8565b5090565b60405180602001604052806124e36124fd565b905290565b5b808211156124cc57600081556001016124e9565b6040518061032001604052806019906020820280368337509192915050565b60006020828403121561252e57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461255957600080fd5b919050565b6000806040838503121561257157600080fd5b61257a83612535565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610320810167ffffffffffffffff811182821017156125db576125db612588565b60405290565b6040516060810167ffffffffffffffff811182821017156125db576125db612588565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561264b5761264b612588565b604052919050565b600061032080838503121561266757600080fd5b604051602080820167ffffffffffffffff838210818311171561268c5761268c612588565b8160405283955087601f8801126126a257600080fd5b6126aa6125b7565b94870194915081888611156126be57600080fd5b875b868110156126e657803583811681146126d95760008081fd5b84529284019284016126c0565b50909352509295945050505050565b60006060828403121561270757600080fd5b50919050565b60008083601f84011261271f57600080fd5b50813567ffffffffffffffff81111561273757600080fd5b6020830191508360208260051b850101111561275257600080fd5b9250929050565b60008060008060008060008060006103e08a8c03121561277857600080fd5b6127818a612535565b985060208a013597506127978b60408c01612653565b96506103608a013567ffffffffffffffff808211156127b557600080fd5b6127c18d838e016126f5565b97506103808c01359150808211156127d857600080fd5b6127e48d838e0161270d565b90975095506103a08c01359150808211156127fe57600080fd5b61280a8d838e016126f5565b94506103c08c013591508082111561282157600080fd5b5061282e8c828d0161270d565b915080935050809150509295985092959850929598565b600080600080600060a0868803121561285d57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806040838503121561289357600080fd5b50508035926020909101359150565b6000806000606084860312156128b757600080fd5b6128c084612535565b95602085013595506040909401359392505050565b60008083601f8401126128e757600080fd5b50813567ffffffffffffffff8111156128ff57600080fd5b60208301915083602082850101111561275257600080fd5b6000806000806000806080878903121561293057600080fd5b86359550602087013567ffffffffffffffff8082111561294f57600080fd5b61295b8a838b016128d5565b9097509550604089013591508082111561297457600080fd5b5061298189828a0161270d565b9094509250506060870135801515811461299a57600080fd5b809150509295509295509295565b6000806000604084860312156129bd57600080fd5b83359250602084013567ffffffffffffffff8111156129db57600080fd5b6129e7868287016128d5565b9497909650939450505050565b600080600080600060808688031215612a0c57600080fd5b612a1586612535565b945060208601359350604086013567ffffffffffffffff80821115612a3957600080fd5b612a4589838a016126f5565b94506060880135915080821115612a5b57600080fd5b50612a688882890161270d565b969995985093965092949392505050565b803563ffffffff8116811461255957600080fd5b600080600060608486031215612aa257600080fd5b83359250612ab260208501612a79565b9150612ac060408501612a79565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b5857612b58612af8565b5060010190565b600060608236031215612b7157600080fd5b612b796125e1565b823567ffffffffffffffff80821115612b9157600080fd5b9084019036601f830112612ba457600080fd5b8135602082821115612bb857612bb8612588565b612be8817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601612604565b92508183523681838601011115612bfe57600080fd5b81818501828501376000918301810191909152908352848101359083015250604092830135928101929092525090565b81516103208201908260005b6019811015612c6357825167ffffffffffffffff16825260209283019290910190600101612c3a565b50505092915050565b60008219821115612c7f57612c7f612af8565b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612cb957600080fd5b83018035915067ffffffffffffffff821115612cd457600080fd5b60200191503681900382131561275257600080fd5b600181815b80851115612d4257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612d2857612d28612af8565b80851615612d3557918102915b93841c9390800290612cee565b509250929050565b600082612d5957506001612e05565b81612d6657506000612e05565b8160018114612d7c5760028114612d8657612da2565b6001915050612e05565b60ff841115612d9757612d97612af8565b50506001821b612e05565b5060208310610133831016604e8410600b8410161715612dc5575081810a612e05565b612dcf8383612ce9565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612e0157612e01612af8565b0290505b92915050565b60006123278383612d4a565b600082821015612e2957612e29612af8565b500390565b600063ffffffff83811690831681811015612e4b57612e4b612af8565b039392505050565b600063ffffffff808316818516808303821115612e7257612e72612af8565b01949350505050565b6000845160005b81811015612e9c5760208188018101518583015201612e82565b81811115612eab576000828501525b509190910192835250602082015260400191905056fea164736f6c634300080f000a",
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "methods": {
      "loadKeccak256PreimagePart(uint256,bytes)": {
        "params": {
          "_partOffset": "The offset of the preimage to read.",
          "_preimage": "The preimage data."
        }
      },
      "loadLocalData(uint256,bytes32,bytes32,uint256,uint256)": {
        "details": "The local data parts are loaded into the preimage oracle under the context      of the caller - no other account can write to the caller's context      specific data.      There are 5 local data identifiers:      ┌────────────┬────────────────────────┐      │ Identifier │      Data              │      ├────────────┼────────────────────────┤      │          1 │ L1 Head Hash (bytes32) │      │          2 │ Output Root (bytes32)  │      │          3 │ Root Claim (bytes32)   │      │          4 │ L2 Block Number (u64)  │      │          5 │ Chain ID (u64)         │      └────────────┴────────────────────────┘",
        "params": {
          "_ident": "The identifier of the local data.",
          "_localContext": "The local key context for the preimage oracle. Optionally, can be set as a constant                      if the caller only requires one set of local keys.",
          "_partOffset": "The offset of the local data part to write to the oracle.",
          "_size": "The number of bytes in `_word` to load.",
          "_word": "The local data word."
        }
      },
      "readPreimage(bytes32,uint256)": {
        "params": {
          "_key": "The key of the preimage to read.",
          "_offset": "The offset of the preimage to read."
        },
        "returns": {
          "datLen_": "The length of the preimage data.",
          "dat_": "The preimage data."
        }
      }
    },
    "title": "PreimageOracle"
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"ActiveProposal\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"AlreadyFinalized\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"BadProposal\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidInputSize\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidPreimage\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"InvalidProof\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotEOA\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"NotInitialized\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"PartOffsetOOB\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"PostStateMatches\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"StatesNotContiguous\"},{\"inputs\":[],\"type\":\"error\",\"name\":\"TreeSizeOverflow\"},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"CHALLENGE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"KECCAK_TREE_DEPTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_LEAF_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uuid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_stateCommitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"_finalize\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addLeavesLPP\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uuid\",\"type\":\"uint256\"},{\"internalType\":\"struct PreimageOracle.Leaf\",\"name\":\"_postState\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateCommitment\",\"type\":\"bytes32\"}]},{\"internalType\":\"bytes32[]\",\"name\":\"_postStateProof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"challengeFirstLPP\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uuid\",\"type\":\"uint256\"},{\"internalType\":\"struct LibKeccak.StateMatrix\",\"name\":\"_stateMatrix\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint64[25]\",\"name\":\"state\",\"type\":\"uint64[25]\"}]},{\"internalType\":\"struct PreimageOracle.Leaf\",\"name\":\"_preState\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateCommitment\",\"type\":\"bytes32\"}]},{\"internalType\":\"bytes32[]\",\"name\":\"_preStateProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"struct PreimageOracle.Leaf\",\"name\":\"_postState\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateCommitment\",\"type\":\"bytes32\"}]},{\"internalType\":\"bytes32[]\",\"name\":\"_postStateProof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"challengeLPP\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uuid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getTreeRootLPP\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"treeRoot_\",\"type\":\"bytes32\"}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uuid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_partOffset\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_claimedSize\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initLPP\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_preimage\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"loadKeccak256PreimagePart\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ident\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_localContext\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_word\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"loadLocalData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key_\",\"type\":\"bytes32\"}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"preimageLengths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"preimagePartOk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"preimageParts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalBlocks\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uuid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalBlocksLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"len_\",\"type\":\"uint256\"}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalBranches\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalMetadata\",\"outputs\":[{\"internalType\":\"LPPMetaData\",\"name\":\"\",\"type\":\"bytes32\"}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposalParts\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uuid\",\"type\":\"uint256\"}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"readPreimage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"dat_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"datLen_\",\"type\":\"uint256\"}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uuid\",\"type\":\"uint256\"},{\"internalType\":\"struct LibKeccak.StateMatrix\",\"name\":\"_stateMatrix\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint64[25]\",\"name\":\"state\",\"type\":\"uint64[25]\"}]},{\"internalType\":\"struct PreimageOracle.Leaf\",\"name\":\"_preState\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateCommitment\",\"type\":\"bytes32\"}]},{\"internalType\":\"bytes32[]\",\"name\":\"_preStateProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"struct PreimageOracle.Leaf\",\"name\":\"_postState\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"stateCommitment\",\"type\":\"bytes32\"}]},{\"internalType\":\"bytes32[]\",\"name\":\"_postStateProof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"squeezeLPP\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"zeroHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}]}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"loadKeccak256PreimagePart(uint256,bytes)\":{\"params\":{\"_partOffset\":\"The offset of the preimage to read.\",\"_preimage\":\"The preimage data.\"}},\"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)\":{\"details\":\"The local data parts are loaded into the preimage oracle under the context      of the caller - no other account can write to the caller's context      specific data.      There are 5 local data identifiers:      ┌────────────┬────────────────────────┐      │ Identifier │      Data              │      ├────────────┼────────────────────────┤      │          1 │ L1 Head Hash (bytes32) │      │          2 │ Output Root (bytes32)  │      │          3 │ Root Claim (bytes32)   │      │          4 │ L2 Block Number (u64)  │      │          5 │ Chain ID (u64)         │      └────────────┴────────────────────────┘\",\"params\":{\"_ident\":\"The identifier of the local data.\",\"_localContext\":\"The local key context for the preimage oracle. Optionally, can be set as a constant                      if the caller only requires one set of local keys.\",\"_partOffset\":\"The offset of the local data part to write to the oracle.\",\"_size\":\"The number of bytes in `_word` to load.\",\"_word\":\"The local data word.\"}},\"readPreimage(bytes32,uint256)\":{\"params\":{\"_key\":\"The key of the preimage to read.\",\"_offset\":\"The offset of the preimage to read.\"},\"returns\":{\"datLen_\":\"The length of the preimage data.\",\"dat_\":\"The preimage data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CHALLENGE_PERIOD()\":{\"notice\":\"The duration of the large preimage proposal challenge period.\"},\"KECCAK_TREE_DEPTH()\":{\"notice\":\"The depth of the keccak256 merkle tree. Supports up to 65,536 keccak blocks, or ~8.91MB preimages.\"},\"MAX_LEAF_COUNT()\":{\"notice\":\"The maximum number of keccak blocks that can fit into the merkle tree.\"},\"addLeavesLPP(uint256,bytes,bytes32[],bool)\":{\"notice\":\"Adds a contiguous list of keccak state matrices to the merkle tree.\"},\"challengeFirstLPP(address,uint256,(bytes,uint256,bytes32),bytes32[])\":{\"notice\":\"Challenge the first keccak256 block that was absorbed.\"},\"challengeLPP(address,uint256,(uint64[25]),(bytes,uint256,bytes32),bytes32[],(bytes,uint256,bytes32),bytes32[])\":{\"notice\":\"Challenge a keccak256 block that was committed to in the merkle tree.\"},\"getTreeRootLPP(address,uint256)\":{\"notice\":\"Gets the current merkle root of the large preimage proposal tree.\"},\"initLPP(uint256,uint32,uint32)\":{\"notice\":\"Initialize a large preimage proposal. Must be called before adding any leaves.\"},\"loadKeccak256PreimagePart(uint256,bytes)\":{\"notice\":\"Prepares a preimage to be read by keccak256 key, starting at         the given offset and up to 32 bytes (clipped at preimage length, if out of data).\"},\"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Loads of local data part into the preimage oracle.\"},\"preimageLengths(bytes32)\":{\"notice\":\"Mapping of pre-image keys to pre-image lengths.\"},\"preimagePartOk(bytes32,uint256)\":{\"notice\":\"Mapping of pre-image keys to pre-image part offsets to preimage preparedness.\"},\"preimageParts(bytes32,uint256)\":{\"notice\":\"Mapping of pre-image keys to pre-image offsets to pre-image parts.\"},\"proposalBlocks(address,uint256,uint256)\":{\"notice\":\"Mapping of claimants to proposal UUIDs to blocks which leaves were added to the merkle tree.\"},\"proposalBlocksLen(address,uint256)\":{\"notice\":\"Returns the length of the array with the block numbers of `addLeavesLPP` calls for a given large         preimage proposal.\"},\"proposalBranches(address,uint256,uint256)\":{\"notice\":\"Mapping of claimants to proposal UUIDs to the current branch path of the merkleization process.\"},\"proposalCount()\":{\"notice\":\"Returns the length of the `proposals` array\"},\"proposalMetadata(address,uint256)\":{\"notice\":\"Mapping of claimants to proposal UUIDs to the timestamp of creation of the proposal as well as the challenged status.\"},\"proposalParts(address,uint256)\":{\"notice\":\"Mapping of claimants to proposal UUIDs to the preimage part picked up during the absorbtion process.\"},\"proposals(uint256)\":{\"notice\":\"Append-only array of large preimage proposals for off-chain reference.\"},\"readPreimage(bytes32,uint256)\":{\"notice\":\"Reads a preimage from the oracle.\"},\"squeezeLPP(address,uint256,(uint64[25]),(bytes,uint256,bytes32),bytes32[],(bytes,uint256,bytes32),bytes32[])\":{\"notice\":\"Finalize a large preimage proposal after the challenge period has passed.\"},\"zeroHashes(uint256)\":{\"notice\":\"Static padding hashes. These values are persisted in storage, but are entirely immutable         after the constructor's execution.\"}},\"version\":1}},\"settings\":{\"remappings\":[\"@cwia/=lib/clones-with-immutable-args/src/\",\"@lib-keccak/=lib/lib-keccak/contracts/lib/\",\"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\"@rari-capital/solmate/=lib/solmate/\",\"@solady-test/=lib/lib-keccak/lib/solady/test/\",\"@solady/=lib/lib-keccak/lib/solady/src/\",\"clones-with-immutable-args/=lib/clones-with-immutable-args/src/\",\"ds-test/=lib/forge-std/lib/ds-test/src/\",\"forge-std/=lib/forge-std/src/\",\"kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\"lib-keccak/=lib/lib-keccak/contracts/\",\"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\"safe-contracts/=lib/safe-contracts/contracts/\",\"solady/=lib/solady/src/\",\"solmate/=lib/solmate/src/\"],\"optimizer\":{\"enabled\":true,\"runs\":999999},\"metadata\":{\"bytecodeHash\":\"none\"},\"compilationTarget\":{\"src/cannon/PreimageOracle.sol\":\"PreimageOracle\"},\"evmVersion\":\"london\",\"libraries\":{}},\"sources\":{\"lib/lib-keccak/contracts/lib/LibKeccak.sol\":{\"keccak256\":\"0x8dde9ac5972d35fc752b3aae40491bdd648e6d910bdc3cdba4256f56abafe672\",\"urls\":[\"bzz-raw://ea269cbccc1eda4a57c6681d3c7648cd1ae3303ce1a3cdc1c703334d4be104f1\",\"dweb:/ipfs/QmRDE2GT8yRebnPbAZLBY9s3CHZt1ZjRXiRm8qufV8gpGx\"],\"license\":\"MIT\"},\"src/cannon/PreimageKeyLib.sol\":{\"keccak256\":\"0x082e910b8a3f523ac0920f0bc5a09e127fe9e48127694e5a0efce820d4654e85\",\"urls\":[\"bzz-raw://bce8c13880b75f2d8561188279b2333c455c831216fc29375570d9c93767c6cc\",\"dweb:/ipfs/QmRmworxD49TBLcLS81sNUEfkQVgg3tf2L6pUDCduDJvWm\"],\"license\":\"MIT\"},\"src/cannon/PreimageOracle.sol\":{\"keccak256\":\"0x2cf4e85298d4eff906ad8b9a2b6415c1ca66e889c98857e564ef365d66f7c3d7\",\"urls\":[\"bzz-raw://ea3f14f2e56d6e4179cd3001d93446d2b6b811b487b8bdfaaa7c93e5f9cab823\",\"dweb:/ipfs/QmSnCyEhGYKeDPbyiJsgtQdUadb6DEzCcYyuVtR8rHSYdM\"],\"license\":\"MIT\"},\"src/cannon/interfaces/IPreimageOracle.sol\":{\"keccak256\":\"0xbba7c884cae96e8891ffa27de01049cc763665a8c009f7bb09572a56009cebe0\",\"urls\":[\"bzz-raw://dcda03b5007b6f0053e721fbbd9850ead181ea7366bc826294bfe1fb812c8e7c\",\"dweb:/ipfs/QmUKTfc13UnzMgKoghCmCdYHc35y1tRLBADFWgxibPbSxX\"],\"license\":\"MIT\"},\"src/cannon/libraries/CannonErrors.sol\":{\"keccak256\":\"0xb7ee92ae926ca08a08ceb0d4ad09aabeaccf3d75b435266c77e225edc820d58a\",\"urls\":[\"bzz-raw://cbae632b1ab9f99d5095833ef643e21f0f6c4ca8332da08660e7023d05d7c56a\",\"dweb:/ipfs/QmYdx7jugPVN3oMNHk4faEkvJtnFfAHj79px4MSS4FPjXg\"],\"license\":\"MIT\"},\"src/cannon/libraries/CannonTypes.sol\":{\"keccak256\":\"0x824cf959d88683db3c2a0bdfc9c27afdd363433f94c4a9e6c8e2c2d57d25e4de\",\"urls\":[\"bzz-raw://18c5b0181b5db4686e270c405e007891cb86f4f37edbe12cbb4765522169ce39\",\"dweb:/ipfs/QmTJ3N1auNzyXRo23cV2TVpyyYUh2h89nG3QMCdiPDiSPe\"],\"license\":\"MIT\"}},\"version\":1}",
  "numDeployments": 1,
  "receipt": "",
  "solcInputHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "storageLayout": {
    "storage": [
      {
        "astId": 81831,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "preimageLengths",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 81838,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "preimageParts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))"
      },
      {
        "astId": 81845,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "preimagePartOk",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 81867,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "zeroHashes",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_bytes32)16_storage"
      },
      {
        "astId": 81872,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "proposals",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_struct(LargePreimageProposalKeys)81862_storage)dyn_storage"
      },
      {
        "astId": 81881,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "proposalBranches",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_bytes32)16_storage))"
      },
      {
        "astId": 81889,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "proposalMetadata",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_userDefinedValueType(LPPMetaData)83054))"
      },
      {
        "astId": 81896,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "proposalParts",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))"
      },
      {
        "astId": 81904,
        "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
        "label": "proposalBlocks",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint64)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)16_storage": {
        "encoding": "inplace",
        "label": "bytes32[16]",
        "numberOfBytes": "512",
        "base": "t_bytes32"
      },
      "t_array(t_struct(LargePreimageProposalKeys)81862_storage)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "struct PreimageOracle.LargePreimageProposalKeys[]",
        "numberOfBytes": "32",
        "base": "t_struct(LargePreimageProposalKeys)81862_storage"
      },
      "t_array(t_uint64)dyn_storage": {
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32",
        "base": "t_uint64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_bytes32)16_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bytes32[16]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_bytes32)16_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_array(t_uint64)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint64[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint64)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes32)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_userDefinedValueType(LPPMetaData)83054))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => LPPMetaData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_userDefinedValueType(LPPMetaData)83054)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes32)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_bytes32)16_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32[16])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)16_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint64)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint64[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint64)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_userDefinedValueType(LPPMetaData)83054)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => LPPMetaData)",
        "numberOfBytes": "32",
        "value": "t_userDefinedValueType(LPPMetaData)83054"
      },
      "t_struct(LargePreimageProposalKeys)81862_storage": {
        "encoding": "inplace",
        "label": "struct PreimageOracle.LargePreimageProposalKeys",
        "numberOfBytes": "64",
        "members": [
          {
            "astId": 81858,
            "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
            "label": "claimant",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 81861,
            "contract": "src/cannon/PreimageOracle.sol:PreimageOracle",
            "label": "uuid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ]
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_userDefinedValueType(LPPMetaData)83054": {
        "encoding": "inplace",
        "label": "LPPMetaData",
        "numberOfBytes": "32"
      }
    }
  },
  "transactionHash": "0xa10368f84ee7abf0a5a6ecd3554856477a444759a6c16627bd16a7f3dc2c87ac",
  "userdoc": {
    "version": 1,
    "kind": "user",
    "methods": {
      "CHALLENGE_PERIOD()": {
        "notice": "The duration of the large preimage proposal challenge period."
      },
      "KECCAK_TREE_DEPTH()": {
        "notice": "The depth of the keccak256 merkle tree. Supports up to 65,536 keccak blocks, or ~8.91MB preimages."
      },
      "MAX_LEAF_COUNT()": {
        "notice": "The maximum number of keccak blocks that can fit into the merkle tree."
      },
      "addLeavesLPP(uint256,bytes,bytes32[],bool)": {
        "notice": "Adds a contiguous list of keccak state matrices to the merkle tree."
      },
      "challengeFirstLPP(address,uint256,(bytes,uint256,bytes32),bytes32[])": {
        "notice": "Challenge the first keccak256 block that was absorbed."
      },
      "challengeLPP(address,uint256,(uint64[25]),(bytes,uint256,bytes32),bytes32[],(bytes,uint256,bytes32),bytes32[])": {
        "notice": "Challenge a keccak256 block that was committed to in the merkle tree."
      },
      "getTreeRootLPP(address,uint256)": {
        "notice": "Gets the current merkle root of the large preimage proposal tree."
      },
      "initLPP(uint256,uint32,uint32)": {
        "notice": "Initialize a large preimage proposal. Must be called before adding any leaves."
      },
      "loadKeccak256PreimagePart(uint256,bytes)": {
        "notice": "Prepares a preimage to be read by keccak256 key, starting at         the given offset and up to 32 bytes (clipped at preimage length, if out of data)."
      },
      "loadLocalData(uint256,bytes32,bytes32,uint256,uint256)": {
        "notice": "Loads of local data part into the preimage oracle."
      },
      "preimageLengths(bytes32)": {
        "notice": "Mapping of pre-image keys to pre-image lengths."
      },
      "preimagePartOk(bytes32,uint256)": {
        "notice": "Mapping of pre-image keys to pre-image part offsets to preimage preparedness."
      },
      "preimageParts(bytes32,uint256)": {
        "notice": "Mapping of pre-image keys to pre-image offsets to pre-image parts."
      },
      "proposalBlocks(address,uint256,uint256)": {
        "notice": "Mapping of claimants to proposal UUIDs to blocks which leaves were added to the merkle tree."
      },
      "proposalBlocksLen(address,uint256)": {
        "notice": "Returns the length of the array with the block numbers of `addLeavesLPP` calls for a given large         preimage proposal."
      },
      "proposalBranches(address,uint256,uint256)": {
        "notice": "Mapping of claimants to proposal UUIDs to the current branch path of the merkleization process."
      },
      "proposalCount()": {
        "notice": "Returns the length of the `proposals` array"
      },
      "proposalMetadata(address,uint256)": {
        "notice": "Mapping of claimants to proposal UUIDs to the timestamp of creation of the proposal as well as the challenged status."
      },
      "proposalParts(address,uint256)": {
        "notice": "Mapping of claimants to proposal UUIDs to the preimage part picked up during the absorbtion process."
      },
      "proposals(uint256)": {
        "notice": "Append-only array of large preimage proposals for off-chain reference."
      },
      "readPreimage(bytes32,uint256)": {
        "notice": "Reads a preimage from the oracle."
      },
      "squeezeLPP(address,uint256,(uint64[25]),(bytes,uint256,bytes32),bytes32[],(bytes,uint256,bytes32),bytes32[])": {
        "notice": "Finalize a large preimage proposal after the challenge period has passed."
      },
      "zeroHashes(uint256)": {
        "notice": "Static padding hashes. These values are persisted in storage, but are entirely immutable         after the constructor's execution."
      }
    },
    "errors": {
      "ActiveProposal()": [
        {
          "notice": "Thrown when the proposal has not matured past the challenge period."
        }
      ],
      "AlreadyFinalized()": [
        {
          "notice": "Thrown when the preimage proposal has already been finalized."
        }
      ],
      "BadProposal()": [
        {
          "notice": "Thrown when attempting to finalize a proposal that has been challenged."
        }
      ],
      "InvalidInputSize()": [
        {
          "notice": "Thrown when a leaf with an invalid input size is added."
        }
      ],
      "InvalidPreimage()": [
        {
          "notice": "Thrown when the prestate preimage doesn't match the claimed preimage."
        }
      ],
      "InvalidProof()": [
        {
          "notice": "Thrown when a merkle proof fails to verify."
        }
      ],
      "NotEOA()": [
        {
          "notice": "Thrown when the caller of a function is not an EOA."
        }
      ],
      "NotInitialized()": [
        {
          "notice": "Thrown when attempting to add leaves to a preimage proposal that has not been initialized."
        }
      ],
      "PartOffsetOOB()": [
        {
          "notice": "Thrown when a passed part offset is out of bounds."
        }
      ],
      "PostStateMatches()": [
        {
          "notice": "Thrown when the permutation yields the expected result."
        }
      ],
      "StatesNotContiguous()": [
        {
          "notice": "Thrown when the pre and post states passed aren't contiguous."
        }
      ],
      "TreeSizeOverflow()": [
        {
          "notice": "Thrown when the preimage is too large to fit in the tree."
        }
      ]
    },
    "notice": "A contract for storing permissioned pre-images."
  }
}